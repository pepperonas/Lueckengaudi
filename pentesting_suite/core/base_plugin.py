from abc import ABC, abstractmethod
from typing import Dict, Any, Optional, List
from dataclasses import dataclass
import asyncio
from enum import Enum


class PluginStatus(Enum):
    IDLE = "idle"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class Severity(Enum):
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


@dataclass
class PluginResult:
    plugin_name: str
    status: PluginStatus
    data: Dict[str, Any]
    errors: Optional[List[str]] = None
    timestamp: Optional[str] = None


@dataclass
class Vulnerability:
    title: str
    description: str
    severity: Severity
    affected_component: str
    recommendation: str
    evidence: Optional[Dict[str, Any]] = None
    cve: Optional[str] = None
    cvss_score: Optional[float] = None


class BasePlugin(ABC):
    def __init__(self, name: str, version: str, description: str):
        self.name = name
        self.version = version
        self.description = description
        self.status = PluginStatus.IDLE
        self.config = {}
        self.results = []
        self.vulnerabilities = []
        self._rate_limiter = None
        self._safe_mode = False
        
    @abstractmethod
    async def execute(self, target: str, options: Dict[str, Any]) -> PluginResult:
        pass
    
    @abstractmethod
    def validate_options(self, options: Dict[str, Any]) -> bool:
        pass
    
    def set_config(self, config: Dict[str, Any]):
        self.config = config
        self._safe_mode = config.get("safe_mode", False)
        if "rate_limit" in config:
            self._setup_rate_limiter(config["rate_limit"])
    
    def _setup_rate_limiter(self, rate: int):
        self._rate_limiter = asyncio.Semaphore(rate)
    
    async def _rate_limited_request(self, coro):
        if self._rate_limiter:
            async with self._rate_limiter:
                return await coro
        return await coro
    
    def add_vulnerability(self, vuln: Vulnerability):
        self.vulnerabilities.append(vuln)
    
    def get_results(self) -> List[PluginResult]:
        return self.results
    
    def get_vulnerabilities(self) -> List[Vulnerability]:
        return self.vulnerabilities
    
    def reset(self):
        self.status = PluginStatus.IDLE
        self.results.clear()
        self.vulnerabilities.clear()
    
    @property
    def is_safe_mode(self) -> bool:
        return self._safe_mode