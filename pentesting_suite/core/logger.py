import logging
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional
import json
from rich.console import Console
from rich.logging import RichHandler
from rich.theme import Theme


class Logger:
    _instances = {}
    _console = Console(theme=Theme({
        "info": "cyan",
        "warning": "yellow",
        "error": "bold red",
        "critical": "bold white on red",
        "success": "bold green"
    }))
    
    def __new__(cls, name: str):
        if name not in cls._instances:
            cls._instances[name] = super().__new__(cls)
        return cls._instances[name]
    
    def __init__(self, name: str):
        if hasattr(self, '_initialized'):
            return
        
        self._initialized = True
        self.name = name
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.DEBUG)
        self.audit_logger = None
        
        self._setup_handlers()
    
    def _setup_handlers(self):
        if not self.logger.handlers:
            console_handler = RichHandler(
                console=self._console,
                rich_tracebacks=True,
                markup=True,
                show_time=True,
                show_path=False
            )
            console_handler.setLevel(logging.INFO)
            
            file_handler = logging.FileHandler('pentesting_suite.log', mode='a')
            file_handler.setLevel(logging.DEBUG)
            
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            file_handler.setFormatter(formatter)
            
            self.logger.addHandler(console_handler)
            self.logger.addHandler(file_handler)
    
    def setup_audit_logging(self, audit_dir: str = "audit"):
        audit_path = Path(audit_dir)
        audit_path.mkdir(exist_ok=True)
        
        audit_file = audit_path / f"audit_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jsonl"
        self.audit_logger = logging.getLogger(f"{self.name}_audit")
        
        audit_handler = logging.FileHandler(audit_file, mode='a')
        audit_handler.setFormatter(logging.Formatter('%(message)s'))
        self.audit_logger.addHandler(audit_handler)
        self.audit_logger.setLevel(logging.INFO)
    
    def debug(self, message: str, **kwargs):
        self.logger.debug(message, extra=kwargs)
    
    def info(self, message: str, **kwargs):
        self.logger.info(message, extra=kwargs)
    
    def warning(self, message: str, **kwargs):
        self.logger.warning(message, extra=kwargs)
    
    def error(self, message: str, **kwargs):
        self.logger.error(message, extra=kwargs)
    
    def critical(self, message: str, **kwargs):
        self.logger.critical(message, extra=kwargs)
    
    def success(self, message: str, **kwargs):
        self._console.print(f"[success]✓ {message}[/success]")
        self.info(f"SUCCESS: {message}", **kwargs)
    
    def audit(self, action: str, target: Optional[str] = None, 
              plugin: Optional[str] = None, result: Optional[str] = None, 
              **kwargs):
        if not self.audit_logger:
            return
        
        audit_entry = {
            "timestamp": datetime.utcnow().isoformat(),
            "action": action,
            "target": target,
            "plugin": plugin,
            "result": result,
            "user": os.getenv("USER", "unknown"),
            **kwargs
        }
        
        self.audit_logger.info(json.dumps(audit_entry))
    
    def print_banner(self):
        banner = """
╔═══════════════════════════════════════════════════════════════════╗
║                      PENTESTING SUITE v1.0                        ║
║                  Modular Security Testing Framework               ║
╚═══════════════════════════════════════════════════════════════════╝
        """
        self._console.print(banner, style="bold cyan")
    
    def print_status(self, message: str, status: str = "info"):
        status_icons = {
            "info": "[cyan]ℹ[/cyan]",
            "warning": "[yellow]⚠[/yellow]",
            "error": "[red]✗[/red]",
            "success": "[green]✓[/green]",
            "running": "[blue]⟳[/blue]"
        }
        
        icon = status_icons.get(status, status_icons["info"])
        self._console.print(f"{icon} {message}")
    
    def print_table(self, data: list, title: Optional[str] = None):
        from rich.table import Table
        
        if not data:
            return
        
        table = Table(title=title, show_header=True, header_style="bold cyan")
        
        headers = list(data[0].keys())
        for header in headers:
            table.add_column(header.replace('_', ' ').title())
        
        for row in data:
            table.add_row(*[str(row.get(h, '')) for h in headers])
        
        self._console.print(table)
    
    def set_level(self, level: str):
        numeric_level = getattr(logging, level.upper(), logging.INFO)
        self.logger.setLevel(numeric_level)
        
        for handler in self.logger.handlers:
            if isinstance(handler, RichHandler):
                handler.setLevel(numeric_level)


import os