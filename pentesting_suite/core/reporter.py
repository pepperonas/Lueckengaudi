import json
import os
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any, Optional
from jinja2 import Environment, FileSystemLoader
import pandas as pd
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch

from .base_plugin import PluginResult, Vulnerability, Severity


class Reporter:
    def __init__(self, output_dir: str = "reports"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        self.template_dir = Path(__file__).parent.parent / "templates"
        self.template_dir.mkdir(exist_ok=True)
        
        self._create_default_templates()
    
    def _create_default_templates(self):
        html_template = """<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Pentesting Report - {{ target }}</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #2C2E3B; border-bottom: 3px solid #2C2E3B; padding-bottom: 10px; }
        h2 { color: #444; margin-top: 30px; }
        .summary { background: #f0f0f0; padding: 20px; border-radius: 5px; margin: 20px 0; }
        .vulnerability { margin: 20px 0; padding: 20px; border-left: 4px solid; border-radius: 5px; }
        .critical { border-color: #d32f2f; background: #ffebee; }
        .high { border-color: #f57c00; background: #fff3e0; }
        .medium { border-color: #fbc02d; background: #fffde7; }
        .low { border-color: #388e3c; background: #e8f5e9; }
        .info { border-color: #1976d2; background: #e3f2fd; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background: #2C2E3B; color: white; }
        .timestamp { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Security Assessment Report</h1>
        <div class="summary">
            <h2>Executive Summary</h2>
            <p><strong>Target:</strong> {{ target }}</p>
            <p><strong>Date:</strong> {{ date }}</p>
            <p><strong>Total Vulnerabilities:</strong> {{ vulnerabilities|length }}</p>
            <p><strong>Critical:</strong> {{ critical_count }} | 
               <strong>High:</strong> {{ high_count }} | 
               <strong>Medium:</strong> {{ medium_count }} | 
               <strong>Low:</strong> {{ low_count }}</p>
        </div>
        
        <h2>Vulnerability Details</h2>
        {% for vuln in vulnerabilities %}
        <div class="vulnerability {{ vuln.severity.value }}">
            <h3>{{ vuln.title }}</h3>
            <p><strong>Severity:</strong> {{ vuln.severity.value|upper }}</p>
            <p><strong>Component:</strong> {{ vuln.affected_component }}</p>
            <p><strong>Description:</strong> {{ vuln.description }}</p>
            <p><strong>Recommendation:</strong> {{ vuln.recommendation }}</p>
            {% if vuln.cve %}
            <p><strong>CVE:</strong> {{ vuln.cve }}</p>
            {% endif %}
        </div>
        {% endfor %}
        
        <h2>Scan Results</h2>
        <table>
            <tr>
                <th>Plugin</th>
                <th>Status</th>
                <th>Results</th>
            </tr>
            {% for result in results %}
            <tr>
                <td>{{ result.plugin_name }}</td>
                <td>{{ result.status.value }}</td>
                <td>{{ result.data|tojson }}</td>
            </tr>
            {% endfor %}
        </table>
        
        <p class="timestamp">Report generated at {{ timestamp }}</p>
    </div>
</body>
</html>"""
        
        template_file = self.template_dir / "report_template.html"
        template_file.write_text(html_template)
    
    def generate_report(self, target: str, results: List[PluginResult], 
                       vulnerabilities: List[Vulnerability], format: str = "json") -> str:
        timestamp = datetime.now().isoformat()
        filename = f"report_{target.replace('.', '_')}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        if format == "json":
            return self._generate_json_report(filename, target, results, vulnerabilities, timestamp)
        elif format == "html":
            return self._generate_html_report(filename, target, results, vulnerabilities, timestamp)
        elif format == "pdf":
            return self._generate_pdf_report(filename, target, results, vulnerabilities, timestamp)
        else:
            raise ValueError(f"Unsupported format: {format}")
    
    def _generate_json_report(self, filename: str, target: str, results: List[PluginResult], 
                             vulnerabilities: List[Vulnerability], timestamp: str) -> str:
        report_data = {
            "target": target,
            "timestamp": timestamp,
            "summary": {
                "total_vulnerabilities": len(vulnerabilities),
                "severity_breakdown": self._get_severity_breakdown(vulnerabilities)
            },
            "vulnerabilities": [
                {
                    "title": v.title,
                    "description": v.description,
                    "severity": v.severity.value,
                    "affected_component": v.affected_component,
                    "recommendation": v.recommendation,
                    "cve": v.cve,
                    "cvss_score": v.cvss_score,
                    "evidence": v.evidence
                }
                for v in vulnerabilities
            ],
            "scan_results": [
                {
                    "plugin": r.plugin_name,
                    "status": r.status.value,
                    "data": r.data,
                    "errors": r.errors
                }
                for r in results
            ]
        }
        
        output_file = self.output_dir / f"{filename}.json"
        with open(output_file, 'w') as f:
            json.dump(report_data, f, indent=2, default=str)
        
        return str(output_file)
    
    def _generate_html_report(self, filename: str, target: str, results: List[PluginResult], 
                             vulnerabilities: List[Vulnerability], timestamp: str) -> str:
        env = Environment(loader=FileSystemLoader(self.template_dir))
        template = env.get_template('report_template.html')
        
        severity_breakdown = self._get_severity_breakdown(vulnerabilities)
        
        html_content = template.render(
            target=target,
            date=datetime.now().strftime('%Y-%m-%d'),
            timestamp=timestamp,
            vulnerabilities=vulnerabilities,
            results=results,
            critical_count=severity_breakdown.get('critical', 0),
            high_count=severity_breakdown.get('high', 0),
            medium_count=severity_breakdown.get('medium', 0),
            low_count=severity_breakdown.get('low', 0)
        )
        
        output_file = self.output_dir / f"{filename}.html"
        output_file.write_text(html_content)
        
        return str(output_file)
    
    def _generate_pdf_report(self, filename: str, target: str, results: List[PluginResult], 
                            vulnerabilities: List[Vulnerability], timestamp: str) -> str:
        output_file = self.output_dir / f"{filename}.pdf"
        
        doc = SimpleDocTemplate(str(output_file), pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            textColor=colors.HexColor('#2C2E3B'),
            spaceAfter=30
        )
        
        story.append(Paragraph("Security Assessment Report", title_style))
        story.append(Spacer(1, 20))
        
        summary_data = [
            ['Target', target],
            ['Date', datetime.now().strftime('%Y-%m-%d')],
            ['Total Vulnerabilities', str(len(vulnerabilities))],
        ]
        
        summary_table = Table(summary_data, colWidths=[2*inch, 4*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f0f0f0')),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.white)
        ]))
        
        story.append(summary_table)
        story.append(PageBreak())
        
        if vulnerabilities:
            story.append(Paragraph("Vulnerability Details", styles['Heading2']))
            story.append(Spacer(1, 12))
            
            for vuln in vulnerabilities:
                vuln_data = [
                    ['Title', vuln.title],
                    ['Severity', vuln.severity.value.upper()],
                    ['Component', vuln.affected_component],
                    ['Description', vuln.description],
                    ['Recommendation', vuln.recommendation]
                ]
                
                vuln_table = Table(vuln_data, colWidths=[1.5*inch, 4.5*inch])
                vuln_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#2C2E3B')),
                    ('TEXTCOLOR', (0, 0), (0, -1), colors.white),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 1, colors.grey)
                ]))
                
                story.append(vuln_table)
                story.append(Spacer(1, 20))
        
        doc.build(story)
        return str(output_file)
    
    def _get_severity_breakdown(self, vulnerabilities: List[Vulnerability]) -> Dict[str, int]:
        breakdown = {}
        for vuln in vulnerabilities:
            severity = vuln.severity.value
            breakdown[severity] = breakdown.get(severity, 0) + 1
        return breakdown
    
    def export_to_csv(self, vulnerabilities: List[Vulnerability], filename: str) -> str:
        data = []
        for vuln in vulnerabilities:
            data.append({
                'Title': vuln.title,
                'Severity': vuln.severity.value,
                'Component': vuln.affected_component,
                'Description': vuln.description,
                'Recommendation': vuln.recommendation,
                'CVE': vuln.cve or '',
                'CVSS Score': vuln.cvss_score or ''
            })
        
        df = pd.DataFrame(data)
        output_file = self.output_dir / f"{filename}.csv"
        df.to_csv(output_file, index=False)
        
        return str(output_file)