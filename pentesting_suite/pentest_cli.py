#!/usr/bin/env python3

import argparse
import asyncio
import sys
from pathlib import Path
from typing import List, Optional
from rich.console import Console
from rich.prompt import Prompt, Confirm
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn

sys.path.append(str(Path(__file__).parent))

from core import PluginManager, ConfigManager, Logger, Reporter
from core.config_manager import TargetProfile


class PentestCLI:
    def __init__(self):
        self.logger = Logger("PentestCLI")
        self.config = ConfigManager()
        self.plugin_manager = PluginManager("plugins")
        self.reporter = Reporter()
        self.console = Console()
        
    def setup(self):
        self.logger.print_banner()
        self.plugin_manager.discover_plugins()
        
        if self.config.get("security.audit_logging"):
            self.logger.setup_audit_logging()
    
    def create_parser(self) -> argparse.ArgumentParser:
        parser = argparse.ArgumentParser(
            description="Modular Pentesting Suite",
            formatter_class=argparse.RawDescriptionHelpFormatter
        )
        
        parser.add_argument(
            "-t", "--target",
            help="Target host or IP address",
            required=False
        )
        
        parser.add_argument(
            "-p", "--profile",
            help="Use predefined target profile",
            required=False
        )
        
        parser.add_argument(
            "--list-plugins",
            action="store_true",
            help="List available plugins"
        )
        
        parser.add_argument(
            "--list-profiles",
            action="store_true",
            help="List available target profiles"
        )
        
        subparsers = parser.add_subparsers(dest="command", help="Available commands")
        
        scan_parser = subparsers.add_parser("scan", help="Run security scans")
        scan_parser.add_argument("plugin", help="Plugin to execute")
        scan_parser.add_argument("-t", "--target", help="Target host", required=True)
        scan_parser.add_argument("--start-port", type=int, default=1, help="Start port for port scanner")
        scan_parser.add_argument("--end-port", type=int, default=1000, help="End port for port scanner")
        scan_parser.add_argument("--timeout", type=int, default=1, help="Connection timeout")
        scan_parser.add_argument("--scan-type", choices=["tcp", "udp"], default="tcp", help="Scan type")
        scan_parser.add_argument("-o", "--output", choices=["json", "html", "pdf"], default="json", help="Output format")
        
        profile_parser = subparsers.add_parser("profile", help="Manage target profiles")
        profile_subparsers = profile_parser.add_subparsers(dest="profile_action")
        
        create_profile = profile_subparsers.add_parser("create", help="Create new profile")
        create_profile.add_argument("name", help="Profile name")
        create_profile.add_argument("--hosts", nargs="+", required=True, help="Target hosts")
        create_profile.add_argument("--rate-limit", type=int, default=10, help="Rate limit")
        create_profile.add_argument("--safe-mode", action="store_true", help="Enable safe mode")
        
        config_parser = subparsers.add_parser("config", help="Manage configuration")
        config_parser.add_argument("key", help="Configuration key (e.g., security.safe_mode_default)")
        config_parser.add_argument("value", help="Configuration value")
        
        return parser
    
    def list_plugins(self):
        plugins = self.plugin_manager.list_plugins()
        
        table = Table(title="Available Plugins", show_header=True, header_style="bold cyan")
        table.add_column("Name", style="cyan")
        table.add_column("Version", style="green")
        table.add_column("Description")
        table.add_column("Status", style="yellow")
        
        for plugin in plugins:
            table.add_row(
                plugin["name"],
                plugin["version"],
                plugin["description"],
                plugin["status"]
            )
        
        self.console.print(table)
    
    def list_profiles(self):
        profiles = self.config.list_profiles()
        
        if not profiles:
            self.console.print("[yellow]No profiles found[/yellow]")
            return
        
        table = Table(title="Target Profiles", show_header=True, header_style="bold cyan")
        table.add_column("Name", style="cyan")
        table.add_column("Hosts")
        table.add_column("Rate Limit")
        table.add_column("Safe Mode")
        
        for profile_name in profiles:
            profile = self.config.get_profile(profile_name)
            if profile:
                table.add_row(
                    profile.name,
                    ", ".join(profile.hosts),
                    str(profile.rate_limit),
                    "Yes" if profile.safe_mode else "No"
                )
        
        self.console.print(table)
    
    async def run_scan(self, args):
        target = args.target
        
        if not self.config.is_target_allowed(target):
            self.logger.error(f"Target {target} is not in whitelist")
            return
        
        if self.config.get("security.require_confirmation"):
            if not Confirm.ask(f"[yellow]Confirm scan of {target}?[/yellow]"):
                self.logger.info("Scan cancelled by user")
                return
        
        options = {
            "start_port": args.start_port,
            "end_port": args.end_port,
            "timeout": args.timeout,
            "scan_type": args.scan_type
        }
        
        self.logger.audit("scan_started", target=target, plugin=args.plugin)
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=self.console
        ) as progress:
            task = progress.add_task(f"Scanning {target} with {args.plugin}...", total=1)
            
            result = await self.plugin_manager.execute_plugin(args.plugin, target, options)
            
            progress.update(task, completed=1)
        
        if result:
            self.logger.success(f"Scan completed: {result.status.value}")
            
            plugin = self.plugin_manager.get_plugin(args.plugin)
            vulnerabilities = plugin.get_vulnerabilities() if plugin else []
            
            if vulnerabilities:
                self.console.print(f"\n[bold red]Found {len(vulnerabilities)} vulnerabilities![/bold red]")
                for vuln in vulnerabilities:
                    self.console.print(f"\n[{vuln.severity.value}]â€¢ {vuln.title}[/{vuln.severity.value}]")
                    self.console.print(f"  {vuln.description}")
            
            report_file = self.reporter.generate_report(
                target, [result], vulnerabilities, args.output
            )
            
            self.console.print(f"\n[green]Report saved to: {report_file}[/green]")
            self.logger.audit("scan_completed", target=target, plugin=args.plugin, result="success")
        else:
            self.logger.error("Scan failed")
            self.logger.audit("scan_completed", target=target, plugin=args.plugin, result="failed")
    
    def create_profile(self, args):
        profile = TargetProfile(
            name=args.name,
            hosts=args.hosts,
            rate_limit=args.rate_limit,
            safe_mode=args.safe_mode
        )
        
        self.config.save_profile(profile)
        self.logger.success(f"Profile '{args.name}' created successfully")
    
    def update_config(self, key: str, value: str):
        try:
            if value.lower() in ["true", "false"]:
                value = value.lower() == "true"
            elif value.isdigit():
                value = int(value)
            
            self.config.set(key, value)
            self.logger.success(f"Configuration updated: {key} = {value}")
        except Exception as e:
            self.logger.error(f"Failed to update configuration: {e}")
    
    async def main(self):
        self.setup()
        
        parser = self.create_parser()
        args = parser.parse_args()
        
        if args.list_plugins:
            self.list_plugins()
            return
        
        if args.list_profiles:
            self.list_profiles()
            return
        
        if args.command == "scan":
            await self.run_scan(args)
        elif args.command == "profile":
            if args.profile_action == "create":
                self.create_profile(args)
        elif args.command == "config":
            self.update_config(args.key, args.value)
        else:
            parser.print_help()


if __name__ == "__main__":
    cli = PentestCLI()
    asyncio.run(cli.main())