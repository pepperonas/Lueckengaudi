#!/usr/bin/env python3

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import asyncio
import threading
from typing import Dict, List, Optional
import sys
from pathlib import Path
from datetime import datetime

sys.path.append(str(Path(__file__).parent))

from core import PluginManager, ConfigManager, Logger, Reporter
from core.config_manager import TargetProfile


class PentestGUI:
    def __init__(self):
        self.root = ttk.Window(themename="darkly")
        self.root.title("Pentesting Suite v1.0")
        self.root.geometry("1200x800")
        
        self.logger = Logger("PentestGUI")
        self.config = ConfigManager()
        self.plugin_manager = PluginManager("plugins")
        self.reporter = Reporter()
        
        self.setup_styles()
        self.create_widgets()
        self.setup_async()
        
        self.plugin_manager.discover_plugins()
        self.refresh_plugins()
    
    def setup_styles(self):
        style = ttk.Style()
        
        style.configure("Title.TLabel", font=("Arial", 24, "bold"))
        style.configure("Header.TLabel", font=("Arial", 14, "bold"))
        style.configure("Success.TLabel", foreground="#28a745")
        style.configure("Error.TLabel", foreground="#dc3545")
        style.configure("Warning.TLabel", foreground="#ffc107")
        
        style.configure("Custom.TButton", font=("Arial", 10))
        style.map("Custom.TButton",
                  background=[('active', '#1f2937')])
    
    def create_widgets(self):
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=BOTH, expand=YES, padx=10, pady=10)
        
        self.scan_frame = ttk.Frame(self.notebook)
        self.plugins_frame = ttk.Frame(self.notebook)
        self.results_frame = ttk.Frame(self.notebook)
        self.config_frame = ttk.Frame(self.notebook)
        
        self.notebook.add(self.scan_frame, text="Scan")
        self.notebook.add(self.plugins_frame, text="Plugins")
        self.notebook.add(self.results_frame, text="Results")
        self.notebook.add(self.config_frame, text="Configuration")
        
        self.create_scan_tab()
        self.create_plugins_tab()
        self.create_results_tab()
        self.create_config_tab()
        
        self.status_bar = ttk.Label(
            self.root, 
            text="Ready", 
            relief=SUNKEN,
            anchor=W
        )
        self.status_bar.pack(side=BOTTOM, fill=X)
    
    def create_scan_tab(self):
        header = ttk.Label(
            self.scan_frame,
            text="Security Scan",
            style="Title.TLabel"
        )
        header.pack(pady=20)
        
        main_frame = ttk.Frame(self.scan_frame)
        main_frame.pack(fill=BOTH, expand=YES, padx=20)
        
        target_frame = ttk.LabelFrame(main_frame, text="Target Configuration", padding=20)
        target_frame.pack(fill=X, pady=10)
        
        ttk.Label(target_frame, text="Target Host:").grid(row=0, column=0, sticky=W, padx=5, pady=5)
        self.target_entry = ttk.Entry(target_frame, width=40)
        self.target_entry.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(target_frame, text="Profile:").grid(row=1, column=0, sticky=W, padx=5, pady=5)
        self.profile_var = tk.StringVar()
        self.profile_combo = ttk.Combobox(
            target_frame,
            textvariable=self.profile_var,
            width=37,
            state="readonly"
        )
        self.profile_combo.grid(row=1, column=1, padx=5, pady=5)
        
        plugin_frame = ttk.LabelFrame(main_frame, text="Plugin Selection", padding=20)
        plugin_frame.pack(fill=X, pady=10)
        
        ttk.Label(plugin_frame, text="Plugin:").grid(row=0, column=0, sticky=W, padx=5, pady=5)
        self.plugin_var = tk.StringVar()
        self.plugin_combo = ttk.Combobox(
            plugin_frame,
            textvariable=self.plugin_var,
            width=37,
            state="readonly"
        )
        self.plugin_combo.grid(row=0, column=1, padx=5, pady=5)
        
        options_frame = ttk.LabelFrame(main_frame, text="Scan Options", padding=20)
        options_frame.pack(fill=X, pady=10)
        
        ttk.Label(options_frame, text="Start Port:").grid(row=0, column=0, sticky=W, padx=5, pady=5)
        self.start_port = ttk.Spinbox(options_frame, from_=1, to=65535, width=15)
        self.start_port.set(1)
        self.start_port.grid(row=0, column=1, padx=5, pady=5)
        
        ttk.Label(options_frame, text="End Port:").grid(row=0, column=2, sticky=W, padx=5, pady=5)
        self.end_port = ttk.Spinbox(options_frame, from_=1, to=65535, width=15)
        self.end_port.set(1000)
        self.end_port.grid(row=0, column=3, padx=5, pady=5)
        
        ttk.Label(options_frame, text="Scan Type:").grid(row=1, column=0, sticky=W, padx=5, pady=5)
        self.scan_type = ttk.Combobox(
            options_frame,
            values=["tcp", "udp"],
            width=13,
            state="readonly"
        )
        self.scan_type.set("tcp")
        self.scan_type.grid(row=1, column=1, padx=5, pady=5)
        
        ttk.Label(options_frame, text="Timeout (s):").grid(row=1, column=2, sticky=W, padx=5, pady=5)
        self.timeout = ttk.Spinbox(options_frame, from_=1, to=30, width=15)
        self.timeout.set(1)
        self.timeout.grid(row=1, column=3, padx=5, pady=5)
        
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=20)
        
        self.scan_button = ttk.Button(
            button_frame,
            text="Start Scan",
            command=self.start_scan,
            style="Custom.TButton",
            bootstyle=SUCCESS
        )
        self.scan_button.pack(side=LEFT, padx=5)
        
        self.stop_button = ttk.Button(
            button_frame,
            text="Stop Scan",
            command=self.stop_scan,
            style="Custom.TButton",
            bootstyle=DANGER,
            state=DISABLED
        )
        self.stop_button.pack(side=LEFT, padx=5)
        
        self.progress = ttk.Progressbar(
            main_frame,
            mode='indeterminate',
            bootstyle=INFO
        )
        self.progress.pack(fill=X, padx=20, pady=10)
    
    def create_plugins_tab(self):
        header = ttk.Label(
            self.plugins_frame,
            text="Plugin Management",
            style="Title.TLabel"
        )
        header.pack(pady=20)
        
        columns = ("Name", "Version", "Status", "Description")
        self.plugins_tree = ttk.Treeview(
            self.plugins_frame,
            columns=columns,
            show="headings",
            height=15
        )
        
        for col in columns:
            self.plugins_tree.heading(col, text=col)
            self.plugins_tree.column(col, width=200)
        
        scrollbar = ttk.Scrollbar(self.plugins_frame, orient=VERTICAL, command=self.plugins_tree.yview)
        self.plugins_tree.configure(yscrollcommand=scrollbar.set)
        
        self.plugins_tree.pack(side=LEFT, fill=BOTH, expand=YES, padx=20, pady=10)
        scrollbar.pack(side=RIGHT, fill=Y, pady=10)
        
        button_frame = ttk.Frame(self.plugins_frame)
        button_frame.pack(fill=X, padx=20, pady=10)
        
        ttk.Button(
            button_frame,
            text="Refresh Plugins",
            command=self.refresh_plugins,
            bootstyle=PRIMARY
        ).pack(side=LEFT, padx=5)
    
    def create_results_tab(self):
        header = ttk.Label(
            self.results_frame,
            text="Scan Results",
            style="Title.TLabel"
        )
        header.pack(pady=20)
        
        paned = ttk.PanedWindow(self.results_frame, orient=VERTICAL)
        paned.pack(fill=BOTH, expand=YES, padx=20, pady=10)
        
        results_container = ttk.Frame(paned)
        self.results_text = tk.Text(
            results_container,
            wrap=WORD,
            height=15,
            bg="#1a1a1a",
            fg="#ffffff",
            font=("Consolas", 10)
        )
        
        results_scroll = ttk.Scrollbar(results_container, command=self.results_text.yview)
        self.results_text.configure(yscrollcommand=results_scroll.set)
        
        self.results_text.pack(side=LEFT, fill=BOTH, expand=YES)
        results_scroll.pack(side=RIGHT, fill=Y)
        
        vuln_container = ttk.Frame(paned)
        vuln_label = ttk.Label(vuln_container, text="Vulnerabilities", style="Header.TLabel")
        vuln_label.pack(anchor=W, pady=5)
        
        self.vuln_tree = ttk.Treeview(
            vuln_container,
            columns=("Severity", "Title", "Component", "Description"),
            show="headings",
            height=10
        )
        
        self.vuln_tree.heading("Severity", text="Severity")
        self.vuln_tree.heading("Title", text="Title")
        self.vuln_tree.heading("Component", text="Component")
        self.vuln_tree.heading("Description", text="Description")
        
        self.vuln_tree.column("Severity", width=100)
        self.vuln_tree.column("Title", width=300)
        self.vuln_tree.column("Component", width=200)
        self.vuln_tree.column("Description", width=400)
        
        vuln_scroll = ttk.Scrollbar(vuln_container, command=self.vuln_tree.yview)
        self.vuln_tree.configure(yscrollcommand=vuln_scroll.set)
        
        self.vuln_tree.pack(side=LEFT, fill=BOTH, expand=YES)
        vuln_scroll.pack(side=RIGHT, fill=Y)
        
        paned.add(results_container)
        paned.add(vuln_container)
        
        button_frame = ttk.Frame(self.results_frame)
        button_frame.pack(fill=X, padx=20, pady=10)
        
        ttk.Button(
            button_frame,
            text="Export Report",
            command=self.export_report,
            bootstyle=SUCCESS
        ).pack(side=LEFT, padx=5)
        
        ttk.Button(
            button_frame,
            text="Clear Results",
            command=self.clear_results,
            bootstyle=WARNING
        ).pack(side=LEFT, padx=5)
    
    def create_config_tab(self):
        header = ttk.Label(
            self.config_frame,
            text="Configuration",
            style="Title.TLabel"
        )
        header.pack(pady=20)
        
        notebook = ttk.Notebook(self.config_frame)
        notebook.pack(fill=BOTH, expand=YES, padx=20, pady=10)
        
        general_frame = ttk.Frame(notebook)
        security_frame = ttk.Frame(notebook)
        
        notebook.add(general_frame, text="General")
        notebook.add(security_frame, text="Security")
        
        general_settings = ttk.LabelFrame(general_frame, text="General Settings", padding=20)
        general_settings.pack(fill=X, padx=20, pady=10)
        
        self.log_level = tk.StringVar(value=self.config.get("general.log_level", "INFO"))
        ttk.Label(general_settings, text="Log Level:").grid(row=0, column=0, sticky=W, padx=5, pady=5)
        ttk.Combobox(
            general_settings,
            textvariable=self.log_level,
            values=["DEBUG", "INFO", "WARNING", "ERROR"],
            width=20,
            state="readonly"
        ).grid(row=0, column=1, padx=5, pady=5)
        
        security_settings = ttk.LabelFrame(security_frame, text="Security Settings", padding=20)
        security_settings.pack(fill=X, padx=20, pady=10)
        
        self.require_confirmation = tk.BooleanVar(
            value=self.config.get("security.require_confirmation", True)
        )
        ttk.Checkbutton(
            security_settings,
            text="Require confirmation before scans",
            variable=self.require_confirmation
        ).grid(row=0, column=0, sticky=W, padx=5, pady=5)
        
        self.audit_logging = tk.BooleanVar(
            value=self.config.get("security.audit_logging", True)
        )
        ttk.Checkbutton(
            security_settings,
            text="Enable audit logging",
            variable=self.audit_logging
        ).grid(row=1, column=0, sticky=W, padx=5, pady=5)
        
        self.safe_mode = tk.BooleanVar(
            value=self.config.get("security.safe_mode_default", False)
        )
        ttk.Checkbutton(
            security_settings,
            text="Safe mode by default",
            variable=self.safe_mode
        ).grid(row=2, column=0, sticky=W, padx=5, pady=5)
        
        ttk.Button(
            self.config_frame,
            text="Save Configuration",
            command=self.save_config,
            bootstyle=SUCCESS
        ).pack(pady=20)
    
    def setup_async(self):
        self.loop = asyncio.new_event_loop()
        self.async_thread = threading.Thread(target=self._run_async_loop, daemon=True)
        self.async_thread.start()
    
    def _run_async_loop(self):
        asyncio.set_event_loop(self.loop)
        self.loop.run_forever()
    
    def refresh_plugins(self):
        self.plugins_tree.delete(*self.plugins_tree.get_children())
        
        plugins = self.plugin_manager.list_plugins()
        plugin_names = []
        
        for plugin in plugins:
            self.plugins_tree.insert(
                "",
                END,
                values=(
                    plugin["name"],
                    plugin["version"],
                    plugin["status"],
                    plugin["description"]
                )
            )
            plugin_names.append(plugin["name"])
        
        self.plugin_combo["values"] = plugin_names
        if plugin_names:
            self.plugin_combo.set(plugin_names[0])
        
        profiles = self.config.list_profiles()
        self.profile_combo["values"] = profiles
    
    def start_scan(self):
        target = self.target_entry.get().strip()
        if not target:
            messagebox.showerror("Error", "Please enter a target host")
            return
        
        if not self.config.is_target_allowed(target):
            messagebox.showerror("Error", "Target is not in whitelist")
            return
        
        if self.require_confirmation.get():
            if not messagebox.askyesno("Confirm", f"Start scan on {target}?"):
                return
        
        self.scan_button.config(state=DISABLED)
        self.stop_button.config(state=NORMAL)
        self.progress.start(10)
        self.update_status(f"Scanning {target}...")
        
        options = {
            "start_port": int(self.start_port.get()),
            "end_port": int(self.end_port.get()),
            "timeout": int(self.timeout.get()),
            "scan_type": self.scan_type.get()
        }
        
        future = asyncio.run_coroutine_threadsafe(
            self._run_scan(target, self.plugin_var.get(), options),
            self.loop
        )
        
        self.root.after(100, self._check_scan_complete, future)
    
    async def _run_scan(self, target: str, plugin: str, options: Dict):
        self.logger.audit("scan_started", target=target, plugin=plugin)
        result = await self.plugin_manager.execute_plugin(plugin, target, options)
        return result
    
    def _check_scan_complete(self, future):
        if future.done():
            self.scan_button.config(state=NORMAL)
            self.stop_button.config(state=DISABLED)
            self.progress.stop()
            
            try:
                result = future.result()
                if result:
                    self.display_results(result)
                    self.update_status("Scan completed successfully")
                else:
                    self.update_status("Scan failed", "error")
            except Exception as e:
                self.update_status(f"Scan error: {e}", "error")
        else:
            self.root.after(100, self._check_scan_complete, future)
    
    def stop_scan(self):
        self.update_status("Scan stopped")
        self.scan_button.config(state=NORMAL)
        self.stop_button.config(state=DISABLED)
        self.progress.stop()
    
    def display_results(self, result):
        self.results_text.delete(1.0, END)
        
        output = f"Plugin: {result.plugin_name}\n"
        output += f"Status: {result.status.value}\n"
        output += f"Timestamp: {result.timestamp}\n"
        output += "-" * 50 + "\n\n"
        
        if "open_ports" in result.data:
            output += f"Open Ports Found: {result.data['total_open']}\n\n"
            for port in result.data["open_ports"]:
                output += f"Port {port['port']}: {port['state']} - {port['service']}\n"
                if port.get('banner'):
                    output += f"  Banner: {port['banner']}\n"
        
        self.results_text.insert(1.0, output)
        
        plugin = self.plugin_manager.get_plugin(result.plugin_name)
        if plugin:
            vulnerabilities = plugin.get_vulnerabilities()
            self.display_vulnerabilities(vulnerabilities)
    
    def display_vulnerabilities(self, vulnerabilities):
        self.vuln_tree.delete(*self.vuln_tree.get_children())
        
        for vuln in vulnerabilities:
            severity_colors = {
                "critical": "#dc3545",
                "high": "#fd7e14",
                "medium": "#ffc107",
                "low": "#28a745",
                "info": "#17a2b8"
            }
            
            item = self.vuln_tree.insert(
                "",
                END,
                values=(
                    vuln.severity.value.upper(),
                    vuln.title,
                    vuln.affected_component,
                    vuln.description
                )
            )
            
            self.vuln_tree.tag_configure(
                vuln.severity.value,
                foreground=severity_colors.get(vuln.severity.value, "#ffffff")
            )
            self.vuln_tree.item(item, tags=(vuln.severity.value,))
    
    def export_report(self):
        if not self.results_text.get(1.0, END).strip():
            messagebox.showwarning("Warning", "No results to export")
            return
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[
                ("JSON files", "*.json"),
                ("HTML files", "*.html"),
                ("PDF files", "*.pdf"),
                ("All files", "*.*")
            ]
        )
        
        if filename:
            messagebox.showinfo("Success", f"Report exported to {filename}")
    
    def clear_results(self):
        self.results_text.delete(1.0, END)
        self.vuln_tree.delete(*self.vuln_tree.get_children())
        self.update_status("Results cleared")
    
    def save_config(self):
        self.config.set("general.log_level", self.log_level.get())
        self.config.set("security.require_confirmation", self.require_confirmation.get())
        self.config.set("security.audit_logging", self.audit_logging.get())
        self.config.set("security.safe_mode_default", self.safe_mode.get())
        
        self.logger.set_level(self.log_level.get())
        
        messagebox.showinfo("Success", "Configuration saved successfully")
    
    def update_status(self, message: str, level: str = "info"):
        self.status_bar.config(text=message)
        
        if level == "error":
            self.status_bar.config(foreground="#dc3545")
        elif level == "warning":
            self.status_bar.config(foreground="#ffc107")
        else:
            self.status_bar.config(foreground="#ffffff")
    
    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    app = PentestGUI()
    app.run()